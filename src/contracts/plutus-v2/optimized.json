{
  "preamble": {
    "title": "golddyev/marketplace-sc-old",
    "description": "Aiken contracts for project 'golddyev/marketplace-sc-old'",
    "version": "0.0.0",
    "plutusVersion": "v2",
    "compiler": {
      "name": "Aiken",
      "version": "v1.0.29-alpha+16fb02e"
    },
    "license": "Apache-2.0"
  },
  "validators": [
    {
      "title": "marketplace.spend",
      "datum": {
        "title": "datum",
        "schema": {
          "$ref": "#/definitions/marketplace~1types~1MarketplaceDatum"
        }
      },
      "redeemer": {
        "title": "redeemer",
        "schema": {
          "$ref": "#/definitions/marketplace~1MarketplaceRedeemer"
        }
      },
      "parameters": [
        {
          "title": "marketplace_address",
          "schema": {
            "$ref": "#/definitions/aiken~1transaction~1credential~1Address"
          }
        },
        {
          "title": "authorizers",
          "schema": {
            "$ref": "#/definitions/List$ByteArray"
          }
        }
      ],
      "compiledCode": "59057c01000032323232323232223223232322322533300b32323232533300f300a3010375400e26464646464646464646464646464a66603a646600200203644a66604400229404c94ccc080cc04801cdd718128010a5113300300300130250011300a333006001002003133223232323253330233375e605060520040122a66604666ebc00c08854ccc08ccdc4802980a0008a511616163756604e002604e004604a00260426ea8008c088004cdc199b833370466600c604600200498103d879800048191206248190ccc018018dd618108021bad3021301e37540286eb0c080c074dd500b99ba548010cc078dd49b94376601a97ae03758603c603e603e603e603e603e603e002603c603c60346ea8030888c8c8c8c8c8c94ccc080cdd798129813001003899191919299981219baf302900200715333024533302433712002602a00a2602200229404cdc0000a9998138018a400026601e0120062c2c6eb4c0a0c0a4004c090dd518138011bac3026302700133010008491117061796f7574732061726520656d70747900163756604800260480046044002603c6ea8c084008dd61810181080099805001a481116f7574707574732061726520656d70747900222533301933712900a0008999801801980f980f980f980f980f980f980f980f980f980f80119b800014804c4cc01c008004c004004888c8c8c8c8c8c94ccc074cdd798111811801260103d879800013232323253330213375e604c00400e2a666042a66604266e24004c0480144c038004528099b8000153330240031480004ccc03403402400c5858dd69812981300098109baa30240023758604660480026601a00e92115617578207061796f7574732061726520656d7074790016375660420026042004603e00260366ea8c078008dd6180e980f00099803801248115617578206f7574707574732061726520656d70747900371090001800800911299980a180780088010999801801980d00119b8000148004894ccc054008584cc058c05c008cc058dd3980c00125eb808c8c94ccc048cdc79bae301300248900100116375a602664a66602a0022c2a66602a60300022602e0022c6eacc04c0054ccc04c0045854ccc04cc0580044c054004584cc004dd6180a180a980a980a980a980a980a980a980a98089baa003375c6028602a60226ea802c88c8cc00400400c894ccc054004528099299980999b8f375c603000400829444cc00c00c004c060004c94ccc038c020c03cdd50008980998081baa00116301230130023011001300d375400229309b2b192999805180280089919299980798090010a4c2c6eb4c040004c030dd50010a99980518020008a99980698061baa00214985858c028dd5000992999804180198049baa004132323232533300f3012002132498c8cc004004010894ccc04400452613233003003301500232533300f300a30103754002264646464a66602c60320042649329998099807180a1baa003132323232533301a301d00213232498c94ccc064c0500044c8c94ccc078c0840084c92632533301c30170011323253330213024002132498c05c00458c088004c078dd50010a99980e180b0008991919191919299981298140010a4c2c6eb4c098004c098008dd6981200098120011bad3022001301e37540042c60386ea800458c07c004c06cdd50018a99980c98098008a99980e180d9baa00314985858c064dd500118080018b180d800980d801180c800980a9baa0031616375a602e002602e004602a00260226ea800458c04c00458dd7180800098080011bac300e001300a37540082c464a666012600800226464a66601c60220042930b1bae300f001300b37540042a666012600600226464a66601c60220042930b1bae300f001300b37540042c60126ea8004dc3a40046e1d20003758002ae6955ceaab9e5573eae815d0aba201",
      "hash": "8986dfc00946b520706360df139f37ec3d205b064051b9837ce05c9e"
    }
  ],
  "definitions": {
    "ByteArray": {
      "dataType": "bytes"
    },
    "Int": {
      "dataType": "integer"
    },
    "List$ByteArray": {
      "dataType": "list",
      "items": {
        "$ref": "#/definitions/ByteArray"
      }
    },
    "List$marketplace/types/Payout": {
      "dataType": "list",
      "items": {
        "$ref": "#/definitions/marketplace~1types~1Payout"
      }
    },
    "Option$aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      "title": "Optional",
      "anyOf": [
        {
          "title": "Some",
          "description": "An optional value.",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "$ref": "#/definitions/aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          "title": "None",
          "description": "Nothing.",
          "dataType": "constructor",
          "index": 1,
          "fields": []
        }
      ]
    },
    "aiken/transaction/credential/Address": {
      "title": "Address",
      "description": "A Cardano `Address` typically holding one or two credential references.\n\n Note that legacy bootstrap addresses (a.k.a. 'Byron addresses') are\n completely excluded from Plutus contexts. Thus, from an on-chain\n perspective only exists addresses of type 00, 01, ..., 07 as detailed\n in [CIP-0019 :: Shelley Addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019/#shelley-addresses).",
      "anyOf": [
        {
          "title": "Address",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "title": "payment_credential",
              "$ref": "#/definitions/aiken~1transaction~1credential~1Credential"
            },
            {
              "title": "stake_credential",
              "$ref": "#/definitions/Option$aiken~1transaction~1credential~1Referenced$aiken~1transaction~1credential~1Credential"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Credential": {
      "title": "Credential",
      "description": "A general structure for representing an on-chain `Credential`.\n\n Credentials are always one of two kinds: a direct public/private key\n pair, or a script (native or Plutus).",
      "anyOf": [
        {
          "title": "VerificationKeyCredential",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "$ref": "#/definitions/ByteArray"
            }
          ]
        },
        {
          "title": "ScriptCredential",
          "dataType": "constructor",
          "index": 1,
          "fields": [
            {
              "$ref": "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "aiken/transaction/credential/Referenced$aiken/transaction/credential/Credential": {
      "title": "Referenced",
      "description": "Represent a type of object that can be represented either inline (by hash)\n or via a reference (i.e. a pointer to an on-chain location).\n\n This is mainly use for capturing pointers to a stake credential\n registration certificate in the case of so-called pointer addresses.",
      "anyOf": [
        {
          "title": "Inline",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "$ref": "#/definitions/aiken~1transaction~1credential~1Credential"
            }
          ]
        },
        {
          "title": "Pointer",
          "dataType": "constructor",
          "index": 1,
          "fields": [
            {
              "title": "slot_number",
              "$ref": "#/definitions/Int"
            },
            {
              "title": "transaction_index",
              "$ref": "#/definitions/Int"
            },
            {
              "title": "certificate_index",
              "$ref": "#/definitions/Int"
            }
          ]
        }
      ]
    },
    "marketplace/MarketplaceRedeemer": {
      "title": "MarketplaceRedeemer",
      "description": "A user can either buy a token\n or cancel/update the listing.",
      "anyOf": [
        {
          "title": "Buy",
          "description": "`payout_outputs_offset` tells us where\n the outputs containing the payouts start.",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "title": "payout_outputs_offset",
              "$ref": "#/definitions/Int"
            }
          ]
        },
        {
          "title": "WithdrawOrUpdate",
          "description": "Cancel or update a listing.",
          "dataType": "constructor",
          "index": 1,
          "fields": []
        }
      ]
    },
    "marketplace/types/MarketplaceDatum": {
      "title": "MarketplaceDatum",
      "description": "A listing requires a datum that has\n the owner's payment key and a list of payouts.\n We do not need to specify the marketplace payout\n in `payouts` even though it will be in\n one of the outputs.",
      "anyOf": [
        {
          "title": "MarketplaceDatum",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "title": "payouts",
              "description": "Does not contain the marketplace payout.\n This is usually royalty and seller payouts.",
              "$ref": "#/definitions/List$marketplace~1types~1Payout"
            },
            {
              "title": "owner",
              "description": "Flexible to allow discounts\n The key that listed the NFT",
              "$ref": "#/definitions/ByteArray"
            }
          ]
        }
      ]
    },
    "marketplace/types/Payout": {
      "title": "Payout",
      "anyOf": [
        {
          "title": "Payout",
          "dataType": "constructor",
          "index": 0,
          "fields": [
            {
              "title": "address",
              "$ref": "#/definitions/aiken~1transaction~1credential~1Address"
            },
            {
              "title": "amount_lovelace",
              "$ref": "#/definitions/Int"
            }
          ]
        }
      ]
    }
  }
}
